{"version":3,"file":"Image-D0x54Wxr.js","sources":["../../node_modules/ol/string.js","../../node_modules/ol/resolution.js","../../node_modules/ol/reproj/Image.js","../../node_modules/ol/source/common.js","../../node_modules/ol/source/Image.js","../../node_modules/ol/uri.js","../../node_modules/ol/source/wms.js","../../node_modules/ol/source/ImageWMS.js","../../node_modules/ol/layer/BaseImage.js","../../node_modules/ol/renderer/canvas/ImageLayer.js","../../node_modules/ol/layer/Image.js"],"sourcesContent":["/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          function (e) {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n          this\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\nimport {ceil} from '../math.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {equivalent} from '../proj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport {linearFindNearest} from '../array.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate()\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this)\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n","/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n","/**\n * @module ol/source/wms\n */\n\nimport {DECIMALS} from './common.js';\nimport {appendParams} from '../uri.js';\nimport {compareVersions} from '../string.js';\nimport {decode} from '../Image.js';\nimport {floor, round} from '../math.js';\nimport {getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {get as getProjection} from '../proj.js';\nimport {getRequestExtent} from './Image.js';\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n\n/**\n * @param {string} baseUrl Base URL.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params WMS params. Will be modified in place.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(baseUrl, extent, size, projection, params) {\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  let bbox;\n  const v13 = compareVersions(params['VERSION'], '1.3') >= 0;\n  params[v13 ? 'CRS' : 'SRS'] = projection.getCode();\n  if (v13 && axisOrientation.substr(0, 2) == 'ne') {\n    bbox = [extent[1], extent[0], extent[3], extent[2]];\n  } else {\n    bbox = extent;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(/** @type {string} */ (baseUrl), params);\n}\n\n/**\n * @param {import(\"../extent\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio pixel ratio.\n * @param {import(\"../proj.js\").Projection} projection Projection.\n * @param {string} url WMS service url.\n * @param {Object} params WMS params.\n * @param {import(\"./wms.js\").ServerType} serverType The type of the remote WMS server.\n * @return {string} Image src.\n */\nexport function getImageSrc(\n  extent,\n  resolution,\n  pixelRatio,\n  projection,\n  url,\n  params,\n  serverType\n) {\n  params = Object.assign({REQUEST: 'GetMap'}, params);\n\n  const imageResolution = resolution / pixelRatio;\n\n  const imageSize = [\n    round(getWidth(extent) / imageResolution, DECIMALS),\n    round(getHeight(extent) / imageResolution, DECIMALS),\n  ];\n\n  if (pixelRatio != 1) {\n    switch (serverType) {\n      case 'geoserver':\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case 'mapserver':\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case 'carmentaserver':\n      case 'qgis':\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        throw new Error('Unknown `serverType` configured');\n    }\n  }\n\n  const src = getRequestUrl(url, extent, imageSize, projection, params);\n  return src;\n}\n\n/**\n * @param {Object} params WMS params.\n * @param {string} request WMS `REQUEST`.\n * @return {Object} WMS params with required properties set.\n */\nexport function getRequestParams(params, request) {\n  return Object.assign(\n    {\n      'REQUEST': request,\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'FORMAT': 'image/png',\n      'STYLES': '',\n      'TRANSPARENT': true,\n    },\n    params\n  );\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT` and `BBOX` will be set\n * dynamically. `CRS` (`SRS` for WMS version < 1.3.0) will is derived from the `proection` config.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {string} url WMS service URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for WMS images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const hidpi = options.hidpi === undefined ? true : options.hidpi;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n  const ratio = options.ratio || 1.5;\n  const load = options.load || decode;\n\n  /**\n   * @type {import(\"../Image.js\").Loader}\n   */\n  return (extent, resolution, pixelRatio) => {\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    if (pixelRatio != 1 && (!hidpi || options.serverType === undefined)) {\n      pixelRatio = 1;\n    }\n    const src = getImageSrc(\n      extent,\n      resolution,\n      pixelRatio,\n      projection,\n      options.url,\n      getRequestParams(options.params, 'GetMap'),\n      options.serverType\n    );\n    const image = new Image();\n    if (options.crossOrigin !== null) {\n      image.crossOrigin = options.crossOrigin;\n    }\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n\n/**\n * Get the GetFeatureInfo URL for the passed coordinate and resolution. Returns `undefined` if the\n * GetFeatureInfo URL cannot be constructed.\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function. In addition to\n * the params required by the loader, `INFO_FORMAT` should be specified, it defaults to\n * `application/json`. If `QUERY_LAYERS` is not provided, then the layers specified in the `LAYERS`\n * parameter will be used.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nexport function getFeatureInfoUrl(options, coordinate, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const projectionObj = getProjection(options.projection || 'EPSG:3857');\n\n  const extent = getForViewAndSize(\n    coordinate,\n    resolution,\n    0,\n    GETFEATUREINFO_IMAGE_SIZE\n  );\n\n  const baseParams = {\n    'QUERY_LAYERS': options.params['LAYERS'],\n    'INFO_FORMAT': 'application/json',\n  };\n  Object.assign(\n    baseParams,\n    getRequestParams(options.params, 'GetFeatureInfo'),\n    options.params\n  );\n\n  const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n  const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n  const v13 = compareVersions(baseParams['VERSION'], '1.3') >= 0;\n  baseParams[v13 ? 'I' : 'X'] = x;\n  baseParams[v13 ? 'J' : 'Y'] = y;\n\n  return getRequestUrl(\n    options.url,\n    extent,\n    GETFEATUREINFO_IMAGE_SIZE,\n    projectionObj,\n    baseParams\n  );\n}\n\n/**\n * Get the GetLegendGraphic URL, optionally optimized for the passed resolution and possibly\n * including any passed specific parameters. Returns `undefined` if the GetLegendGraphic URL\n * cannot be constructed.\n *\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function.\n * @param {number} [resolution] Resolution. If not provided, `SCALE` will not be calculated and\n * included in URL.\n * @return {string|undefined} GetLegendGraphic URL.\n * @api\n */\nexport function getLegendUrl(options, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_VERSION,\n    'REQUEST': 'GetLegendGraphic',\n    'FORMAT': 'image/png',\n  };\n\n  if (options.params === undefined || options.params['LAYER'] === undefined) {\n    const layers = options.params.LAYERS;\n    const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n    if (!isSingleLayer) {\n      return undefined;\n    }\n    baseParams['LAYER'] = layers;\n  }\n\n  if (resolution !== undefined) {\n    const mpu =\n      getProjection(options.projection || 'EPSG:3857').getMetersPerUnit() || 1;\n    const pixelSize = 0.00028;\n    baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n  }\n\n  Object.assign(baseParams, options.params);\n\n  return appendParams(options.url, baseParams);\n}\n","/**\n * @module ol/source/ImageWMS\n */\n\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {createLoader, getFeatureInfoUrl, getLegendUrl} from './wms.js';\nimport {decode} from '../Image.js';\nimport {get as getProjection, transform} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const options = {\n      url: this.url_,\n      params: {\n        ...this.params_,\n        ...params,\n      },\n      projection: sourceProjectionObj || projectionObj,\n    };\n    return getFeatureInfoUrl(options, coordinate, resolution);\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    return getLegendUrl(\n      {\n        url: this.url_,\n        params: {\n          ...this.params_,\n          ...params,\n        },\n      },\n      resolution\n    );\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        projection: projection,\n        serverType: this.serverType_,\n        hidpi: this.hidpi_,\n        url: this.url_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.loader = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\n\nexport default ImageWMS;\n","/**\n * @module ol/layer/BaseImage\n */\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {ImageSourceType} [source] Source for this layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<ImageSourceType, RendererType>}\n * @api\n */\nclass BaseImageLayer extends Layer {\n  /**\n   * @param {Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n  }\n}\n\nexport default BaseImageLayer;\n","/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image_ = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image_ ? null : this.image_.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection)\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image_ = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image_ = null;\n          }\n        }\n      } else {\n        this.image_ = null;\n      }\n    }\n\n    return !!this.image_;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image_.getExtent();\n    const img = this.image_.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const image = this.image_;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    const extent = frameState.extent;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    const context = this.context;\n    const canvas = context.canvas;\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      let previousAlpha;\n      if (opacity !== 1) {\n        previousAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.globalAlpha = previousAlpha;\n      }\n    }\n    this.postRender(context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/layer/Image\n */\nimport BaseImageLayer from './BaseImage.js';\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\nclass ImageLayer extends BaseImageLayer {\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  createRenderer() {\n    return new CanvasImageLayerRenderer(this);\n  }\n\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default ImageLayer;\n"],"names":["compareVersions","v1","v2","s1","s2","i","n1","n2","fromResolutionLike","resolution","ReprojImage","ImageWrapper","sourceProj","targetProj","targetExtent","targetResolution","pixelRatio","getImageFunction","interpolate","maxSourceExtent","maxTargetExtent","limitedTargetExtent","getIntersection","targetCenter","getCenter","sourceResolution","calculateSourceResolution","errorThresholdInPixels","ERROR_THRESHOLD","triangulation","Triangulation","sourceExtent","sourceImage","isEmpty","state","ImageState","sourcePixelRatio","sourceState","width","getWidth","height","getHeight","renderReprojected","listen","EventType","e","unlistenByKey","DECIMALS","ImageSourceEventType","ImageSourceEvent","Event","type","image","ImageSource","Source","options","resolutions","idx","linearFindNearest","extent","projection","sourceProjection","equivalent","equals","requestExtent","getRequestExtent","requestResolution","containsExtent","event","defaultImageLoadFunction","src","ratio","imageResolution","center","viewWidth","ceil","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight","getForViewAndSize","appendParams","uri","params","keyParams","k","qs","DEFAULT_VERSION","GETFEATUREINFO_IMAGE_SIZE","getRequestUrl","baseUrl","size","axisOrientation","bbox","v13","getImageSrc","url","serverType","imageSize","round","dpi","getRequestParams","request","createLoader","hidpi","getProjection","load","decode","getFeatureInfoUrl","coordinate","projectionObj","baseParams","x","floor","y","getLegendUrl","layers","mpu","pixelSize","ImageWMS","sourceProjectionObj","transform","imageLoadFunction","ImageWMS$1","BaseImageLayer","Layer","CanvasImageLayerRenderer","CanvasLayerRenderer","imageLayer","frameState","layerState","viewState","viewResolution","imageSource","hints","renderedExtent","fromUserExtent","ViewHint","pixel","layer","applyTransform","layerExtent","containsCoordinate","imageExtent","img","imageMapWidth","col","imageMapHeight","row","target","imageResolutionX","imageResolutionY","imagePixelRatio","viewCenter","scaleX","scaleY","rotation","composeTransform","makeInverse","canvasTransform","toTransformString","context","canvas","clipped","render","intersectsExtent","dw","dh","dx","dy","opacity","previousAlpha","ImageLayer","ImageLayer$1"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}